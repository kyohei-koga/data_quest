
# coding: utf-8

# In[3]:

get_ipython().magic(u'matplotlib inline')
import pandas as pd
bikes = pd.read_csv("bike_rental_day.csv")


# # Binomial distributions
# The core of these tests is the idea of a binomial distribution -- we want to know how many visitors out of 100 would normally sign up for our website, and we want to know if changing our button color affected that probability.

# # Bikesharing distribution
# Let's say we're working for the mayor of Washington, DC, Muriel Bowser. She wants to know on how many days out of the next 30 we can expect more than 5000 riders.

# In[4]:

more_than_5000 = bikes[bikes["cnt"] > 5000]
prob_over_5000 = more_than_5000.shape[0] / float(bikes.shape[0])
print prob_over_5000


# # Computing the distribution

# In[7]:

import math
outcome_counts = list(range(31))
def prob(k,N):
    prob_value = (.39**k)*(.61**(N-k))
    conbination = math.factorial(N) / (math.factorial(N-k)*math.factorial(k))
    return conbination * prob_value

outcome_prob = []
for i in outcome_counts:
    outcome_prob.append(prob(i,len(outcome_counts)-1))
print outcome_prob    


# # Plotting the distribution

# In[9]:

import matplotlib.pyplot as plt
plt.bar(outcome_counts,outcome_prob)
plt.show()


# # Simplifying the computation
# To construct our distribution, we had to write our own custom function, and a decent amount of code. We can instead use the binom.pmf function from SciPy to do this faster.
# 
# from scipy import linspace
# 
# from scipy.stats import binom
# 
# - Create a range of numbers from 0 to 30, with 31 elements (each number has one entry).
# 
# outcome_counts = linspace(0,30,31)
# 
# - Create the binomial probabilities, one for each entry in outcome_counts.
# 
# dist = binom.pmf(outcome_counts,30,0.39)

# In[10]:

import scipy
from scipy import linspace
from scipy.stats import binom

outcome_counts = linspace(0,30,31)
dist = binom.pmf(outcome_counts,30,0.39)
plt.bar(outcome_counts,dist)
plt.show()


# # How to think about a probability distribution
# A probability distribution is a great way to visualize data, but bear in mind that it's not dealing in absolute values. A probability distribution can only tell us which values are likely, and how likely they are.

# # A different plot
# Just like we did with histograms and sampling a few missions ago, we can vary the parameters to change the distribution. Let's see what the plot would look like with only 10 events, or 100 events.

# In[11]:

outcome_counts = binom.pmf(linspace(0,30,31),10,.39)
plt.bar(linspace(0,30,31),outcome_counts)
plt.show()
outcome_counts = binom.pmf(linspace(0,100,101),100,.39)
plt.bar(linspace(0,100,101),outcome_counts)
plt.show()


# # The normal distribution
# As the distribution gets narrower, it gets more similar to the normal distribution. In the code cell, we plot a line chat instead of a bar chart and it looks almost exactly like a normal distribution.

# In[12]:

outcome_counts = linspace(0,100,101)
outcome_probs = binom.pmf(outcome_counts,100,.39)
plt.plot(outcome_counts,outcome_probs)
plt.show()


# # Cumulative density function
# So far, we've looked at the probability that single values of k will occur. What we can look at instead is the probability that k or less will occur. These probabilities can be generated by the cumulative density function. 

# In[13]:

outcome_counts = linspace(0,30,31)
dist = binom.cdf(outcome_counts,30,.39)
plt.plot(outcome_counts,dist)
plt.show()


# # Calculating z-scores
# We can calculate z-scores (the number of standard deviations away from the mean a probability is) fairly easily. These z-scores can then be used how we used z-scores earlier -- to find the percentage of values to the left and right of the value we're looking at.
# 
# To make this more concrete, say we had 16 days where we observed more than 5000 riders. Is this likely? Unlikely? Using a z-score, we can figure out exactly how common this event is.
# 
# Based on the standard z-score table, this is unlikely -- a 2.8% chance. This tells us that 97.2% of the data is within 2.2 standard deviations of the mean, so a result to be as different from the mean as this, there is a 2.8% probability that it occurred by chance.

# # Faster way to calculate likelihood
# We don't want to have to use a z-score table every time we want to see how likely or unlikely a probability is. A much faster way is to use the cumulative distribution fuction (cdf) like we did earlier. 

# In[14]:

left_16 = binom.cdf(16,30,.39)
right_16 = 1 - left_16
print left_16,right_16


# In[ ]:



